---
import type { TLanguage } from "@i18n/config/interfaces/languaje.interface";
import { ChevronDown, Globe } from "@lucide/astro";

interface Props {
  languages: Record<string, string>;
}

const { languages } = Astro.props as Props;
const currentLang = Astro.params.lang as TLanguage;
---

<div class="relative inline-block" id="lang-selector">
  <input type="checkbox" id="lang-toggle" class="peer hidden" />

  <label
    for="lang-toggle"
    class="cursor-pointer flex items-center gap-2 px-3 py-2 rounded-lg text-white capitalize"
  >
    <Globe size={20} class="text-primary" />
    {Object.keys(languages).find((code) => code === currentLang)}
    <ChevronDown class="text-white" size={18} />
  </label>

  <ul
    class="absolute top-[calc(100%+8px)] left-0 w-max px-3 py-2 bg-dark border border-white rounded-md shadow-lg space-y-1 opacity-0 scale-95 pointer-events-none peer-checked:opacity-100 peer-checked:scale-100 peer-checked:pointer-events-auto transition-all duration-200 origin-top z-50"
  >
    {
      Object.entries(languages).map(([code, value]) => (
        <li>
          <a
            href={`/${code}`}
            onclick="handleLangSelect(event, this)"
            data-lang={code}
            class="block text-white hover:underline whitespace-nowrap"
          >
            {value}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script is:inline>
  const langSelector = document.getElementById("lang-selector");
  const langToggle = langSelector.querySelector("#lang-toggle");

  document.addEventListener("click", (e) => {
    if (!langSelector.contains(e.target)) langToggle.checked = false;
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") langToggle.checked = false;
  });

  window.handleLangSelect = (e, link) => {
    const lang = link.dataset.lang;
    localStorage.setItem("preferred-lang", lang);
  };
</script>
