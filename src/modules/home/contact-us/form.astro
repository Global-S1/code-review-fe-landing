---
import type { TLanguage } from "@i18n/config/interfaces/languaje.interface";
import { translator } from "@i18n/config/translator";

const lang = Astro.params.lang as TLanguage;
const t = translator(lang);
const content = t.pages.home.contactUs.form;
---

<form
  id="contact-form"
  class="w-full px-6 rounded-lg shadow-md space-y-6"
  novalidate
>
  <div class="w-full">
    <label for="name" class="block mb-2"> {content.name} </label>
    <input
      type="text"
      id="name"
      name="name"
      placeholder={content.placeholder}
      required
      class="mt-1 block w-full rounded-xl border border-gray-500 bg-white/5 shadow-sm py-2 px-4 text-xl"
    />
    <p id="error-name" class="text-red-500 text-sm mt-1 hidden">
      {content.validations.name}
    </p>
  </div>

  <div class="flex flex-col md:flex-row gap-x-12 gap-y-6">
    <div class="grow">
      <label for="email" class="block mb-2"> {content.email} </label>
      <input
        type="email"
        id="email"
        name="email"
        placeholder={content.placeholder}
        required
        class="mt-1 block w-full rounded-xl border border-gray-500 bg-white/5 shadow-sm py-2 px-4 text-xl"
      />
      <p id="error-email" class="text-red-500 text-sm mt-1 hidden">
        {content.validations.email}
      </p>
    </div>

    <div class="grow">
      <label for="phone" class="block mb-2"> {content.cellphone} </label>
      <input
        type="tel"
        id="phone"
        name="phone"
        required
        placeholder={content.placeholder}
        class="mt-1 block w-full rounded-xl border border-gray-500 bg-white/5 shadow-sm py-2 px-4 text-xl"
      />
      <p id="error-phone" class="text-red-500 text-sm mt-1 hidden">
        {content.validations.cellphone}
      </p>
    </div>
  </div>

  <div>
    <div class="flex items-center gap-2">
      <div class="inline-flex items-center">
        <label
          class="relative flex cursor-pointer items-center rounded-full"
          for="checkbox-1"
          data-ripple-dark="true"
        >
          <input
            type="checkbox"
            id="terms"
            name="terms"
            required
            class="before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-primary checked:bg-primary checked:before:bg-primary hover:before:opacity-10"
            id="checkbox-1"
          />
          <div
            class="pointer-events-none absolute top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 text-white opacity-0 transition-opacity peer-checked:opacity-100"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-3.5 w-3.5"
              viewBox="0 0 20 20"
              fill="currentColor"
              stroke="currentColor"
              stroke-width="1"
            >
              <path
                fill-rule="evenodd"
                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </label>
      </div>
      <label for="terms" class="text-sm">
        {content.termsConditions}
        <span class="text-red-500">*</span>
      </label>
    </div>
    <p id="error-terms" class="text-red-500 text-sm hidden mt-1">
      {content.validations.termsConditions}
    </p>
  </div>

  <div class="flex items-center gap-2">
    <div class="inline-flex items-center">
      <label
        class="relative flex cursor-pointer items-center rounded-full"
        for="checkbox-1"
        data-ripple-dark="true"
      >
        <input
          type="checkbox"
          id="newsletter"
          name="newsletter"
          required
          class="before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-primary checked:bg-primary checked:before:bg-primary hover:before:opacity-10"
          id="checkbox-1"
        />
        <div
          class="pointer-events-none absolute top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 text-white opacity-0 transition-opacity peer-checked:opacity-100"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-3.5 w-3.5"
            viewBox="0 0 20 20"
            fill="currentColor"
            stroke="currentColor"
            stroke-width="1"
          >
            <path
              fill-rule="evenodd"
              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
      </label>
    </div>
    <label for="newsletter" class="text-sm">
      {content.news}
    </label>
  </div>

  <div class="flex justify-center">
    <button
      type="submit"
      class="bg-primary text-white font-semibold py-2 px-12 rounded-2xl hover:bg-opacity-80 transition"
    >
      {content.button}
    </button>
  </div>
</form>

<script is:inline>
  const form = document.getElementById("contact-form");

  const showError = (id, message) => {
    const el = document.getElementById(id);
    el.textContent = message;
    el.classList.remove("hidden");
  };

  const clearErrors = () => {
    ["error-name", "error-email", "error-phone", "error-terms"].forEach(
      (id) => {
        const el = document.getElementById(id);
        el.textContent = "";
        el.classList.add("hidden");
      }
    );
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    clearErrors();

    const name = form.name.value.trim();
    const email = form.email.value.trim();
    const phone = form.phone.value.trim();
    const terms = form.terms.checked;
    const newsletter = form.newsletter.checked;

    let isValid = true;

    if (!name) {
      showError("error-name", "El nombre es obligatorio.");
      isValid = false;
    }

    if (!email || !/^\S+@\S+\.\S+$/.test(email)) {
      showError("error-email", "Ingresa un correo válido.");
      isValid = false;
    }

    const phonePattern = /^[0-9+\s()-]{7,20}$/;
    if (!phone || !phonePattern.test(phone)) {
      showError("error-phone", "Ingresa un número de teléfono válido.");
      isValid = false;
    }

    if (!terms) {
      showError("error-terms", "Debes aceptar los términos y condiciones.");
      isValid = false;
    }

    if (!isValid) return;

    const payload = { name, email, phone, terms, newsletter };

    console.log(payload);

    // try {
    //   const res = await fetch("/api/send", {
    //     method: "POST",
    //     headers: { "Content-Type": "application/json" },
    //     body: JSON.stringify(payload),
    //   });

    //   const data = await res.json();
    //   console.log("Enviado correctamente:", data);
    // } catch (error) {
    //   console.error("Error al enviar:", error);
    // }
  });
</script>
